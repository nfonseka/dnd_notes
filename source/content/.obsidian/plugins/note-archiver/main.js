/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NoteArchiverPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ARCHIVE_FOLDER_GROUPINGS = ["NoGrouping", "Year", "Month"];
var DEFAULT_SETTINGS = {
  version: "0.1.0",
  archiveFolderName: "Archive",
  grouping: "NoGrouping"
};
var NoteArchiverPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "archive-current-note",
      name: "Archive current note",
      editorCheckCallback: (checking, editor, view) => {
        if (checking) {
          return !view.file.path.startsWith(
            this.settings.archiveFolderName
          );
        } else {
          this.archivePage(view.file.path);
          return true;
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (!file.path.startsWith(this.settings.archiveFolderName)) {
          menu.addItem((item) => {
            item.setTitle("\u{1F4E4} Archive file").setIcon("document").onClick(async () => {
              this.archivePage(file.path);
            });
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          var _a;
          let path = (_a = view.file) == null ? void 0 : _a.path;
          if (path && !path.startsWith(this.settings.archiveFolderName)) {
            item.setTitle("\u{1F4E4} Archive file").setIcon("document").onClick(async () => {
              this.archivePage(path != null ? path : "");
            });
          }
        });
      })
    );
    this.addSettingTab(new NoteArchiverSettingTab(this.app, this));
  }
  onunload() {
  }
  async archivePage(path) {
    let targetFile = this.app.vault.getAbstractFileByPath(path);
    let archiveFolder = this.settings.archiveFolderName;
    if (this.settings.grouping === "NoGrouping") {
      archiveFolder = this.settings.archiveFolderName;
    } else {
      if (this.settings.grouping === "Year") {
        let year = new Date().getFullYear();
        archiveFolder = (0, import_obsidian.normalizePath)(
          `${this.settings.archiveFolderName}/${year}`
        );
      } else if (this.settings.grouping === "Month") {
        let now = new Date();
        let year = now.getFullYear();
        let paddedMonthNumber = (now.getMonth() + 1).toString().padStart(2, "0");
        let monthName = now.toLocaleString("default", {
          month: "long"
        });
        archiveFolder = (0, import_obsidian.normalizePath)(
          `${this.settings.archiveFolderName}/${year}/${paddedMonthNumber}-${monthName}`
        );
      }
    }
    let newPath = (0, import_obsidian.normalizePath)(`${archiveFolder}/${path}`);
    let newFolder = newPath.substring(0, newPath.lastIndexOf("/"));
    if (this.app.vault.getAbstractFileByPath(newFolder) === null) {
      await this.app.vault.createFolder(newFolder);
    }
    await this.app.fileManager.renameFile(targetFile, newPath);
    new import_obsidian.Notice(`${path} moved to ${newPath}`);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var NoteArchiverSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    let folderPathSetting = new import_obsidian.Setting(containerEl).setName("Archive folder").setDesc("Where should I put your archived files?").addText(
      (text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.archiveFolderName).onChange(async (value) => {
        let folder = (0, import_obsidian.normalizePath)(value);
        this.plugin.settings.archiveFolderName = folder;
        await this.plugin.saveSettings();
        updateFolderPathHelpMessage(
          this.plugin.settings.archiveFolderName
        );
      })
    );
    let folderPathHelpMessage = folderPathSetting.infoEl.createEl("p", {
      text: "",
      cls: ["setting-item-description", "setting-item-extra-info"]
    });
    let updateFolderPathHelpMessage = (folder) => {
      let abstractFile = this.app.vault.getAbstractFileByPath(
        (0, import_obsidian.normalizePath)(folder)
      );
      if (!abstractFile) {
        folderPathHelpMessage.textContent = "Folder not in vault, it will be created when you archive a note here";
      } else {
        if (abstractFile instanceof import_obsidian.TFile) {
          folderPathHelpMessage.textContent = "File exists with this name, you can't archive anything until you change this";
        } else {
          folderPathHelpMessage.textContent = "Folder exists, all good";
        }
      }
    };
    updateFolderPathHelpMessage(this.plugin.settings.archiveFolderName);
    new import_obsidian.Setting(containerEl).setName("Group by").setDesc("Should I group your archived files?").addDropdown(
      (dropdown) => dropdown.addOption("NoGrouping", "Don't group my files").addOption("Year", "Group by year file is archived").addOption(
        "Month",
        "Group by year and month file is archived"
      ).setValue(this.plugin.settings.grouping).onChange(async (value) => {
        if (!ARCHIVE_FOLDER_GROUPINGS.find(
          (validName) => value === validName
        )) {
          throw new Error(
            "Unable to parse ArchiveFolderGrouping from value " + value
          );
        }
        this.plugin.settings.grouping = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
